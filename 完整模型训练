import torch
import torchvision
from torch.utils.tensorboard import SummaryWriter

from P27_model import *
from torch import nn
from torch.utils.data import DataLoader

# 准备训练数据集和测试数据集
train_data = torchvision.datasets.CIFAR10(root='./data', train=True, download=True,
                                          transform=torchvision.transforms.ToTensor())
test_data = torchvision.datasets.CIFAR10(root='./data', train=False, download=True,
                                         transform=torchvision.transforms.ToTensor())

# 看数据集里有多少张图片
train_data_size = len(train_data)
test_data_size = len(test_data)
# 字符串格式化
print("训练数据集的长度为：{}".format(train_data_size))
print("测试数据集的长度为：{}".format(test_data_size))
# 利用Dataloader来加载数据集
train_dataloader = DataLoader(train_data, batch_size=64)
test_dataloader = DataLoader(test_data, batch_size=64)
# 创建网络模型
tudui = Tudui()
# 损失函数
loss_fn = nn.CrossEntropyLoss()
# 优化器
# learning_rate = 0.01
# 1e-2 = 1*10^(-2) = 1/100 = 0.01
learning_rate = 1e-2
optimizer = torch.optim.SGD(tudui.parameters(), lr=learning_rate)
# 设置训练网络的一些参数
# 记录训练的次数
total_train_step = 0
# 记录测试的次数
total_test_step = 0
# 训练的轮数
epoch = 10
# 添加tensorboard
writer = SummaryWriter('./log_train')

for i in range(epoch):
    print("-----------第{}轮训练开始-----------".format(i+1))
    # 训练步骤开始
    # 需要特殊的层需要调用
    tudui.train()
    for data in train_dataloader:
        imgs, targets = data
        outputs = tudui(imgs)
        loss = loss_fn(outputs, targets)
        #优化器优化模型
        # 梯度清零
        optimizer.zero_grad()
        # 反向传播
        loss.backward()
        optimizer.step()
        total_train_step += 1
        # 逢百打印（便于查看结果）
        if total_train_step % 100 == 0:
            print("训练次数：{},loss:{}".format(total_train_step, loss.item()))
            writer.add_scalar('train_loss', loss.item(), test_data_size)
            writer.add_scalar('test_accuracy', )
    # 测试步骤开始
    tudui.eval()
    total_test_loss = 0
    # 计算整体正确率
    total_accuracy = 0
    # 不会进行梯度调优的模式
    with torch.no_grad():
        for data in test_dataloader:
            imgs, targets = data
            outputs = tudui(imgs)
            loss = loss_fn(outputs, targets)
            total_test_loss += loss.item()
            accuracy = (outputs.argmax(1) == targets).sum()
            total_accuracy += accuracy
    print("整体测试集上的loss：{}".format(total_test_loss))
    print("整体测试集上的正确率：{}".format(total_accuracy/test_data_size))
    writer.add_scalar('test_loss', total_accuracy/test_data_size, total_test_step)
    total_test_loss += 1
    # 保存每一轮的训练结果
    torch.save(tudui, "tudui_{}.pth".format(i))
    # torch.save(tudui.state_dict(), "tudui_{}.pth.format(o)")
    print("模型已保存")

writer.close
























