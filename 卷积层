P18卷积层
  输出通道数=卷积核个数

import torch
import torchvision
from torch import nn
from torch.nn import Conv2d
from torch.utils.data import DataLoader
from torch.utils.tensorboard import SummaryWriter

#准备数据集dataset:
# ".."表示当前目录的上一级目录
# train=False 表示需要测试数据集
# 数据类型transform为tensor
# download=True 表示需要下载
dataset = torchvision.datasets.CIFAR10("../data", train=False, transform=torchvision.transforms.ToTensor(),
                                       download=True)
# 把数据集放到dataloader中:
# batch_size 表示每次迭代（训练）的样本数量
dataloader = DataLoader(dataset, batch_size=64)

# 搭建神经网络：
class Tudui(nn.Module):
    # 初始化方法：
    def __init__(self):
        # 父类初始化：
        super(Tudui, self).__init__()
        # 接受3个输入通道（对应RGB图像）并产生6个输出通道，使用3x3的卷积核。
        self.conv1 = Conv2d(in_channels=3, out_channels=6, kernel_size=3, stride=1, padding=0)
    # 定义模型的前向传播：如何处理输入数据并返回输出
    def forward(self, x):
        x = self.conv1(x)
        return(x)

tudui = Tudui()

# 进行可视化：
writer = SummaryWriter("../logs")
# 初始化，用于跟踪当前处理的批次epoch数量
step = 0
# 查看dataloader里面的每一个数据
for data in dataloader:
    # data的组成
    imgs, targets = data
    # 图像经过卷积的操作
    output = tudui(imgs)
    # 查看变化：对比imgs和output
    print(imgs.shape)
    print(output.shape)
    # 添加图像到tensorboard
    # torch.Size([64, 3, 32, 32])
    writer.add_images("input", imgs, step)
    
    # torch.Size([64, 6, 30, 30]) -> [xxx, 3, 30, 30]
    output = torch.reshape(output, (-1, 3, 30, 30))
    writer.add_images("output", output, step)

    step += 1

writer.close()
